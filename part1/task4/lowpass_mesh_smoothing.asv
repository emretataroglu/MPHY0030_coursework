function smoothed = lowpass_mesh_smoothing(vertices, faces, iterations, lambda, mu)
    % Set default values based on the number of input arguments
    
    if nargin <= 2 || isempty(iterations)
        iterations = 10;
    end
    
    if nargin < 3 || isempty(lambda)
        lambda = 0.9;
    end
    
    if nargin < 4 || isempty(mu)
        mu = lambda*(-1.02);
    end
    
    % Seperation of vertices and faces to find neighbours
    % Vertices
    V1 = vertices(:,1);
    V2 = vertices(:,2);
    V3 = vertices(:,3);
    
    % Faces
    F1 = faces(:,1);
    F2 = faces(:,2);
    F3 = faces(:,3);
    
    % Number of vertices
    size_p = size(vertices);
   
    % Initialise smoothed matrix
    smooth = vertices;
    
        % For loops the iteration number and vertex count
        for i = 1:1

            neighbours = faces(find(faces==i),:);

            U = unique(neighbours)';

            U(find(U==i))=[];

            N = length(U);

            % Weighting factor
            w = 1/N;

            for j = 1:N

                smoothed(i,:) = smoothed(i,:) + lambda*w*(vertices(U(j),:)-vertices(i,:));
                f
            end

        end
end
    
    
    